on:
  workflow_dispatch:
    inputs:
      components:
        type: string
        required: true
        default: test1,test2
        description: Component list
      tag:
        type: string
        required: true
        description: Image Tag for components
      ref:
        type: string
        required: true
        description: Specific git ref to tag

  push:
    branches:
      - release/**

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Set components and tag for push event
        if: github.event_name == 'push'
        id: push_vars
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"

          if [[ "$BRANCH" == release/* ]]; then
            # Extract tag and components from branch name format: release/tag/components
            IMAGE_TAG=$(echo "$BRANCH" | cut -d'/' -f2)
            COMPONENTS=$(echo "$BRANCH" | cut -d'/' -f3-)
            GIT_TAG="${IMAGE_TAG}-${SHORT_SHA}"

            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo "git_tag=$GIT_TAG" >> $GITHUB_OUTPUT
            echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          fi

      - name: Set final variables
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IMAGE_TAG="${{ github.event.inputs.tag }}"
            SHORT_SHA="${GITHUB_SHA:0:7}"
            GIT_TAG="${IMAGE_TAG}-${SHORT_SHA}"

            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
            echo "git_tag=$GIT_TAG" >> $GITHUB_OUTPUT
            echo "components=${{ github.event.inputs.components }}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${{ steps.push_vars.outputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "git_tag=${{ steps.push_vars.outputs.git_tag }}" >> $GITHUB_OUTPUT
            echo "components=${{ steps.push_vars.outputs.components }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate components input
        run: |
          if ! [[ "${{ steps.vars.outputs.components }}" =~ ^[^,]+(,[^,]+)*$ ]]; then
            echo "::error::components must be a comma-separated list (e.g., comp1,comp2)"
            exit 1
          fi

      - name: Get branch name
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            branch=release/${{ steps.vars.outputs.image_tag }}/${{ steps.vars.outputs.components }}
          else
            branch="${GITHUB_REF#refs/heads/}"
          fi
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Check if branch exists
        id: branch_exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          BRANCH="${{ steps.branch.outputs.branch }}"
          if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create branch
        if: github.event_name == 'workflow_dispatch' && steps.branch_exists.outputs.branch_exists == 'false'
        run: |
          git checkout -b ${{ steps.branch.outputs.branch }}
          git push -u origin ${{ steps.branch.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if tag exists
        id: tag_exists
        run: |
          TAG="${{ steps.vars.outputs.git_tag }}"
          if git ls-remote --tags origin refs/tags/$TAG | grep -q $TAG; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        if: steps.tag_exists.outputs.tag_exists == 'false'
        run: |
          git tag ${{ steps.vars.outputs.git_tag }}
          git push origin ${{ steps.vars.outputs.git_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release exists
        id: release_exists
        run: |
          TAG="${{ steps.vars.outputs.git_tag }}"
          if gh release view "$TAG" --json name > /dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: release_notes
        if: steps.release_exists.outputs.release_exists == 'false'
        run: |
          echo "# Release ${{ steps.vars.outputs.git_tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Image Tag" >> release_notes.md
          echo "${{ steps.vars.outputs.image_tag }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Components" >> release_notes.md
          echo "${{ steps.vars.outputs.components }}" | tr ',' '\n' | sed 's/^/- /' >> release_notes.md
          echo "" >> release_notes.md
          echo "## Changes" >> release_notes.md
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.vars.outputs.git_tag }}" | head -n 1 || echo "")
          if [ -n "$PREV_TAG" ]; then
            git log $PREV_TAG..HEAD --pretty=format:"* %s (%h)" >> release_notes.md
          else
            git log --pretty=format:"* %s (%h)" >> release_notes.md
          fi
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create release
        if: steps.release_exists.outputs.release_exists == 'false'
        run: |
          gh release create ${{ steps.vars.outputs.git_tag }} \
            --title "Release ${{ steps.vars.outputs.git_tag }}" \
            --notes-file ${{ steps.release_notes.outputs.notes_file }} \
            --target ${{ steps.branch.outputs.branch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release
        if: steps.release_exists.outputs.release_exists == 'true'
        run: |
          echo "# Release ${{ steps.vars.outputs.git_tag }}" > updated_notes.md
          echo "" >> updated_notes.md
          echo "## Image Tag" >> updated_notes.md
          echo "${{ steps.vars.outputs.image_tag }}" >> updated_notes.md
          echo "" >> updated_notes.md
          echo "## Components" >> updated_notes.md
          echo "${{ steps.vars.outputs.components }}" | tr ',' '\n' | sed 's/^/- /' >> updated_notes.md
          gh release edit ${{ steps.vars.outputs.git_tag }} --notes-file updated_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}